{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js"],"names":["props","React","createElement","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","Link","to","fields","slug","title","BlogIndex","_ref","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","Layout","SEO","keywords","map","_ref2","PostCard","key","StaticQuery","query","render","Object","assign"],"mappings":"sLAGeA,KACbC,IAAAC,cAAA,WACEC,UAAS,cAAeH,EAAMI,MAAQ,GAAM,GAAC,mBAAqB,IAChEJ,EAAMK,UAAS,KACbL,EAAMM,KAAKC,YAAYC,UAAS,yBACpCC,MACET,EAAMM,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,OACdV,EAAMM,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAAG,MAKhEZ,IAAAC,cAACY,OAAI,CAACC,GAAIf,EAAMM,KAAKU,OAAOC,KAAMd,UAAU,kBAC1CF,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,MAAIC,UAAU,mBACXH,EAAMM,KAAKC,YAAYW,OAASlB,EAAMM,KAAKU,OAAOC,S,oBCR7D,MAAME,EAAYA,CAAAC,EAAWC,KAAc,IAAxB,KAAEC,GAAMF,EACzB,MAAMG,EAAYD,EAAKE,KAAKC,aAAaP,MACnCQ,EAAQJ,EAAKK,kBAAkBC,MACrC,IAAIC,EAAc,EAElB,OACE5B,IAAAC,cAAC4B,IAAM,CAACZ,MAAOK,GACbtB,IAAAC,cAAC6B,IAAG,CACFb,MAAM,YACNc,SAAU,CAAC,OAAD,iCAIZ/B,IAAAC,cAAA,OAAKC,UAAU,aACZuB,EAAMO,IAAIC,IAAe,IAAd,KAAE5B,GAAM4B,EAElB,OADAL,IAEE5B,IAAAC,cAACiC,EAAQ,CACPC,IAAK9B,EAAKU,OAAOC,KACjBb,MAAOyB,EACPvB,KAAMA,EACND,UAAS,cA0CRL,aACbC,IAAAC,cAACmC,cAAW,CACVC,MAnCY,aAoCZC,OAAQjB,GACNrB,IAAAC,cAACiB,EAASqB,OAAAC,OAAA,CAACpB,SAAUrB,EAAMqB,SAAUrB,OAAK,EAACsB,KAAMA,GAAUtB,O","file":"component---src-pages-index-js-c514f9d78edc6ceb5836.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nexport default props => (\r\n  <article\r\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\r\n      props.postClass\r\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\r\n    style={\r\n      props.node.frontmatter.thumbnail && {\r\n        backgroundImage: `url(${\r\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\r\n        })`,\r\n      }\r\n    }\r\n  >\r\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\r\n      <div className=\"post-card-content\">\r\n        <h2 className=\"post-card-title\">\r\n          {props.node.frontmatter.title || props.node.fields.slug}\r\n        </h2>\r\n      </div>\r\n    </Link>\r\n  </article>\r\n)\r\n","import React from \"react\"\r\nimport { graphql, StaticQuery } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport PostCard from \"../components/postCard\"\r\n\r\n// import \"../utils/global.scss\"\r\nimport \"../utils/normalize.css\"\r\nimport \"../utils/css/screen.css\"\r\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\r\nconst BlogIndex = ({ data }, location) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const posts = data.allMarkdownRemark.edges\r\n  let postCounter = 0\r\n\r\n  return (\r\n    <Layout title={siteTitle}>\r\n      <SEO\r\n        title=\"All posts\"\r\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n      />\r\n      {/* <Bio /> */}\r\n      \r\n      <div className=\"post-feed\">\r\n        {posts.map(({ node }) => {\r\n          postCounter++\r\n          return (\r\n            <PostCard\r\n              key={node.fields.slug}\r\n              count={postCounter}\r\n              node={node}\r\n              postClass={`post`}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst indexQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            description\r\n            thumbnail {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1360) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default props => (\r\n  <StaticQuery\r\n    query={indexQuery}\r\n    render={data => (\r\n      <BlogIndex location={props.location} props data={data} {...props} />\r\n    )}\r\n  />\r\n)\r\n"],"sourceRoot":""}